const { mongoose, Schema } = require('mongoose')
const jwt = require('jsonwebtoken')
const Account = require('./account.model');
const ShortUniqueId = require('short-unique-id');
const generator = require('generate-password');
const bcrypt = require('bcryptjs');


const userSchema = new mongoose.Schema({
    firstName: {
        type: String,
        required: true
    },
    lastName: {
        type: String,
        required: true,
    },
    age: {
        type: Number,
        required: true,
        validate(value) {
            if (value < 0) {
                throw new Error('Age is invalid')
            }
        }
    },
    password: {
        type: String,
        required: true,
        minlength: 14,
        trim: true,
    },
    account: {
        type: Schema.Types.ObjectId, ref: 'Account'
    },
    isAdmin: {
        type: Boolean,
        default: false
    },
    tokens: [{
        token: {
            type: String,
            required: true
        }
    }],
}, {
    timestamps: true,
    autoIndex: true
});

/**
 * Middleware
 * Pre-Save, Ofuscate the password before introducing the document
 * https://www.npmjs.com/package/bcrypt
 */
userSchema.pre('save', async function (next) {
    const user = this

    if (user.isModified('password')) {
        user.password = await bcrypt.hash(user.password, 8)
    }

    next()
})

/**
 * Generate jsonwebtoken based on mongo ID field autogenerated
 * Update user object with new token, then return the token
 * https://www.npmjs.com/package/jsonwebtoken
 * @returns {token}
 */
userSchema.methods.generateAuthToken = async function () {
    const user = this
    const token = jwt.sign({ _id: user._id.toString() }, process.env.JWT_SECRET, {
        expiresIn: '15m'
    })

    //Merge the array of old tokens with the new one
    user.tokens = user.tokens.concat({ token })
    await user.save()

    return token
}

/**
 * Generate a new account for that user with an initial balance
 * https://www.npmjs.com/package/short-unique-id
 * @param {*} userBalance
 * @returns 
 */
userSchema.methods.generateNewAccount = async function (userBalance) {
    const user = this

    const uid = new ShortUniqueId({ length: 10 });
    const account = new Account({
        accountId: uid(),
        balance: userBalance,
        user: user._id
    })

    try {
        await account.save()

        user.account = account._id
        await user.save()

        console.log('User account created and linked: ', account)
    } catch (e) {
        throw new Error('Error saving the account', e)
    }

    return account
}

/**
 * Helper function to generate a new secure password of 14 digits
 * Password shall contains number, letters and special characters
 * https://www.npmjs.com/package/generate-password
 * @returns {password}
 */
userSchema.statics.generateSecurePassword = async () => {
    const securePassword = generator.generate({
        length: 14,
        numbers: true,
        symbols: true,
        strict: true
    });

    return securePassword
}

const User = mongoose.model('User', userSchema);
module.exports = User;